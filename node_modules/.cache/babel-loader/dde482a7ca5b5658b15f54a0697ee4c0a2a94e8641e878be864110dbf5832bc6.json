{"ast":null,"code":"// src/store.js\nconst REC_KEY = \"records\";\nconst MASTERY_KEY = \"mastery_v1\"; // { [name]: { [day]: [qid, qid, ...] } }\nconst BADGE_KEY = \"badges_v1\"; // { [name]: [{ day, ts }] }\n\nexport const loadJSON = (k, fb) => {\n  try {\n    return JSON.parse(localStorage.getItem(k) || JSON.stringify(fb));\n  } catch {\n    return fb;\n  }\n};\nexport const saveJSON = (k, v) => localStorage.setItem(k, JSON.stringify(v));\n\n/** ── Records ───────────────────────────────────────────────── */\nexport const getRecords = () => loadJSON(REC_KEY, []);\nexport const setRecords = list => saveJSON(REC_KEY, list);\nexport const addRecord = rec => {\n  const list = getRecords();\n  list.push(rec);\n  setRecords(list);\n  return rec;\n};\nexport const deleteRecordById = id => {\n  const list = getRecords().filter(r => r.id !== id);\n  setRecords(list);\n};\nexport const uid = () => Math.random().toString(36).slice(2, 10);\n\n/** ── Mastery / Badges ─────────────────────────────────────── */\nexport const getMastery = () => loadJSON(MASTERY_KEY, {});\nexport const setMastery = m => saveJSON(MASTERY_KEY, m);\nexport const getBadges = () => loadJSON(BADGE_KEY, {});\nexport const setBadges = b => saveJSON(BADGE_KEY, b);\n\n/**\n * 문항 완벽 통과(오답 0) 시 숙련도 업데이트.\n * 모든 문항 통과하면 뱃지 자동 지급.\n */\nexport const updateMasteryOnPerfect = (name, day, qid, totalQuestionsOfDay) => {\n  const m = getMastery();\n  if (!m[name]) m[name] = {};\n  if (!m[name][day]) m[name][day] = [];\n\n  // qid 중복 없이 저장\n  if (!m[name][day].includes(qid)) m[name][day].push(qid);\n  setMastery(m);\n\n  // 전부 통과 여부 확인 → 뱃지 지급\n  const mastered = m[name][day].length;\n  if (mastered >= totalQuestionsOfDay) {\n    const b = getBadges();\n    if (!b[name]) b[name] = [];\n    // 동일 day 중복 지급 방지\n    if (!b[name].some(x => x.day === day)) {\n      b[name].push({\n        day,\n        ts: Date.now()\n      });\n      setBadges(b);\n      return true; // 새 배지 지급됨\n    }\n  }\n  return false; // 아직 미지급\n};","map":{"version":3,"names":["REC_KEY","MASTERY_KEY","BADGE_KEY","loadJSON","k","fb","JSON","parse","localStorage","getItem","stringify","saveJSON","v","setItem","getRecords","setRecords","list","addRecord","rec","push","deleteRecordById","id","filter","r","uid","Math","random","toString","slice","getMastery","setMastery","m","getBadges","setBadges","b","updateMasteryOnPerfect","name","day","qid","totalQuestionsOfDay","includes","mastered","length","some","x","ts","Date","now"],"sources":["/Users/evelynpark/Desktop/bell-day/who-is-going-to-bell-the-cat/src/store.js"],"sourcesContent":["// src/store.js\nconst REC_KEY = \"records\";\nconst MASTERY_KEY = \"mastery_v1\";  // { [name]: { [day]: [qid, qid, ...] } }\nconst BADGE_KEY = \"badges_v1\";     // { [name]: [{ day, ts }] }\n\nexport const loadJSON = (k, fb) => {\n  try { return JSON.parse(localStorage.getItem(k) || JSON.stringify(fb)); }\n  catch { return fb; }\n};\nexport const saveJSON = (k, v) => localStorage.setItem(k, JSON.stringify(v));\n\n/** ── Records ───────────────────────────────────────────────── */\nexport const getRecords = () => loadJSON(REC_KEY, []);\nexport const setRecords = (list) => saveJSON(REC_KEY, list);\n\nexport const addRecord = (rec) => {\n  const list = getRecords();\n  list.push(rec);\n  setRecords(list);\n  return rec;\n};\n\nexport const deleteRecordById = (id) => {\n  const list = getRecords().filter(r => r.id !== id);\n  setRecords(list);\n};\n\nexport const uid = () => Math.random().toString(36).slice(2, 10);\n\n/** ── Mastery / Badges ─────────────────────────────────────── */\nexport const getMastery = () => loadJSON(MASTERY_KEY, {});\nexport const setMastery = (m) => saveJSON(MASTERY_KEY, m);\n\nexport const getBadges = () => loadJSON(BADGE_KEY, {});\nexport const setBadges = (b) => saveJSON(BADGE_KEY, b);\n\n/**\n * 문항 완벽 통과(오답 0) 시 숙련도 업데이트.\n * 모든 문항 통과하면 뱃지 자동 지급.\n */\nexport const updateMasteryOnPerfect = (name, day, qid, totalQuestionsOfDay) => {\n  const m = getMastery();\n  if (!m[name]) m[name] = {};\n  if (!m[name][day]) m[name][day] = [];\n\n  // qid 중복 없이 저장\n  if (!m[name][day].includes(qid)) m[name][day].push(qid);\n  setMastery(m);\n\n  // 전부 통과 여부 확인 → 뱃지 지급\n  const mastered = m[name][day].length;\n  if (mastered >= totalQuestionsOfDay) {\n    const b = getBadges();\n    if (!b[name]) b[name] = [];\n    // 동일 day 중복 지급 방지\n    if (!b[name].some(x => x.day === day)) {\n      b[name].push({ day, ts: Date.now() });\n      setBadges(b);\n      return true; // 새 배지 지급됨\n    }\n  }\n  return false; // 아직 미지급\n};\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,SAAS;AACzB,MAAMC,WAAW,GAAG,YAAY,CAAC,CAAE;AACnC,MAAMC,SAAS,GAAG,WAAW,CAAC,CAAK;;AAEnC,OAAO,MAAMC,QAAQ,GAAGA,CAACC,CAAC,EAAEC,EAAE,KAAK;EACjC,IAAI;IAAE,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACL,CAAC,CAAC,IAAIE,IAAI,CAACI,SAAS,CAACL,EAAE,CAAC,CAAC;EAAE,CAAC,CACzE,MAAM;IAAE,OAAOA,EAAE;EAAE;AACrB,CAAC;AACD,OAAO,MAAMM,QAAQ,GAAGA,CAACP,CAAC,EAAEQ,CAAC,KAAKJ,YAAY,CAACK,OAAO,CAACT,CAAC,EAAEE,IAAI,CAACI,SAAS,CAACE,CAAC,CAAC,CAAC;;AAE5E;AACA,OAAO,MAAME,UAAU,GAAGA,CAAA,KAAMX,QAAQ,CAACH,OAAO,EAAE,EAAE,CAAC;AACrD,OAAO,MAAMe,UAAU,GAAIC,IAAI,IAAKL,QAAQ,CAACX,OAAO,EAAEgB,IAAI,CAAC;AAE3D,OAAO,MAAMC,SAAS,GAAIC,GAAG,IAAK;EAChC,MAAMF,IAAI,GAAGF,UAAU,CAAC,CAAC;EACzBE,IAAI,CAACG,IAAI,CAACD,GAAG,CAAC;EACdH,UAAU,CAACC,IAAI,CAAC;EAChB,OAAOE,GAAG;AACZ,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,EAAE,IAAK;EACtC,MAAML,IAAI,GAAGF,UAAU,CAAC,CAAC,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EAClDN,UAAU,CAACC,IAAI,CAAC;AAClB,CAAC;AAED,OAAO,MAAMQ,GAAG,GAAGA,CAAA,KAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;AAEhE;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM1B,QAAQ,CAACF,WAAW,EAAE,CAAC,CAAC,CAAC;AACzD,OAAO,MAAM6B,UAAU,GAAIC,CAAC,IAAKpB,QAAQ,CAACV,WAAW,EAAE8B,CAAC,CAAC;AAEzD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM7B,QAAQ,CAACD,SAAS,EAAE,CAAC,CAAC,CAAC;AACtD,OAAO,MAAM+B,SAAS,GAAIC,CAAC,IAAKvB,QAAQ,CAACT,SAAS,EAAEgC,CAAC,CAAC;;AAEtD;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,mBAAmB,KAAK;EAC7E,MAAMR,CAAC,GAAGF,UAAU,CAAC,CAAC;EACtB,IAAI,CAACE,CAAC,CAACK,IAAI,CAAC,EAAEL,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC;EAC1B,IAAI,CAACL,CAAC,CAACK,IAAI,CAAC,CAACC,GAAG,CAAC,EAAEN,CAAC,CAACK,IAAI,CAAC,CAACC,GAAG,CAAC,GAAG,EAAE;;EAEpC;EACA,IAAI,CAACN,CAAC,CAACK,IAAI,CAAC,CAACC,GAAG,CAAC,CAACG,QAAQ,CAACF,GAAG,CAAC,EAAEP,CAAC,CAACK,IAAI,CAAC,CAACC,GAAG,CAAC,CAAClB,IAAI,CAACmB,GAAG,CAAC;EACvDR,UAAU,CAACC,CAAC,CAAC;;EAEb;EACA,MAAMU,QAAQ,GAAGV,CAAC,CAACK,IAAI,CAAC,CAACC,GAAG,CAAC,CAACK,MAAM;EACpC,IAAID,QAAQ,IAAIF,mBAAmB,EAAE;IACnC,MAAML,CAAC,GAAGF,SAAS,CAAC,CAAC;IACrB,IAAI,CAACE,CAAC,CAACE,IAAI,CAAC,EAAEF,CAAC,CAACE,IAAI,CAAC,GAAG,EAAE;IAC1B;IACA,IAAI,CAACF,CAAC,CAACE,IAAI,CAAC,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,GAAG,KAAKA,GAAG,CAAC,EAAE;MACrCH,CAAC,CAACE,IAAI,CAAC,CAACjB,IAAI,CAAC;QAAEkB,GAAG;QAAEQ,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC,CAAC;MACrCd,SAAS,CAACC,CAAC,CAAC;MACZ,OAAO,IAAI,CAAC,CAAC;IACf;EACF;EACA,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}